#!/usr/bin/env python
import roslib
import rospy
import math
import tf
from std_msgs.msg import String
import numpy as np
from dynamical_planner.world import World

# old_state = "" 

if __name__ == '__main__' :
   rospy.init_node('getStateWorld')
   rospy.sleep(1.5)
   rate = rospy.Rate(1.0) 
   world = World()
   pub = rospy.Publisher('current_state', String, queue_size = 10)
   pub_handover = rospy.Publisher('handover', String, queue_size = 10)
   world.save_markers_pos()

   while not rospy.is_shutdown() :
      visible = []
      world.reinitialize()
      world.observe_world()

      length = [i for i in range(len(world.visible_items))]
      for k in length :
         visible.append([world.visible_items[k],world.x_position[k],world.y_position[k],world.z_position[k]])

      x = np.array(world.x_position) 
      x = np.argsort(x)

      # y = np.array(world.y_position)
      # y = np.argsort(y)

      total_items = len(world.visible_markers) + len(world.visible_cubes)

      count = 0

      for k in np.arange(total_items) :
         while world.x_position[x[k]] != visible[count][1] :
         # while world.y_position[y[k]] != visible[count][2] :
            count = count + 1
         if visible[count][0] != "G" and visible[count][0] != "B" :
            world.state = world.state + "N"
         else :
            world.state = world.state + visible[count][0]
         count = 0 

      if world.listener_markers.canTransform("camera/1", "marker/6", rospy.Time.now() - rospy.Duration(1.0)) :
         pub_handover.publish("handover")
      else :
         pub_handover.publish("no handover")

      #Manage camera occlusion
      if len(world.state) < 3: #one object is not detected
         world.state = ""
         state_letter = []
         state_pos = []
         length = [i for i in range(len(visible))]
         length2 = [i for i in range(len(world.prerecorded_x_sorted))]
         for j in length :
            for k in length2 :
               if abs(visible[j][1]-world.prerecorded_x_sorted[k]) < 0.05:
                  state_letter.append([visible[j][0]])
                  state_pos.append(k)

         for k in length2:
            if k in state_pos:
               ind = state_pos.index(k)
               if str(state_letter[ind][0]) == "B" or str(state_letter[ind][0]) == "G":
                  world.state = world.state + str(state_letter[ind][0])
               else:
                  world.state = world.state + "N"
            else:
                  world.state = world.state + "N"

      if "B" in world.state and "G" in world.state:
         world.state_full = world.state + "N" 
      elif "B" in world.state and not "G" in world.state:
         if gripper.gripper_status > 110 :
            world.state_full = world.state + "G"
         elif gripper.gripper_status < 110 :
            world.state_full = world.state + "N"

      elif "G" in world.state and not "B" in world.state:
         if gripper.gripper_status > 110 :
            world.state_full = world.state + "B"
         elif gripper.gripper_status < 110 :
            world.state_full = world.state + "N"

      elif not "B" in world.state and not "G" in world.state:
         if gripper.gripper_status > 110 :
            world.state_full = world.state + world.old_state[-1]
         elif gripper.gripper_status < 110 :
            world.state_full = world.state + "N"     

      world.old_state = world.state_full 

      if len(world.state_full) == 4 :
         # rospy.loginfo(world.state_full)
         print(world.state_full)
         pub.publish(world.state_full)
         rate.sleep()