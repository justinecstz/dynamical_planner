#!/usr/bin/env python
import roslib
import rospy
import math
import tf
from std_msgs.msg import String
from robotiq_s_model_control.msg import _SModel_robot_input  as inputMsg
import numpy as np
from dynamical_planner.world import World
from dynamical_planner.gripper import Gripper

if __name__ == '__main__' :
   rospy.init_node('getStateWorld')
   world = World()
   gripper = Gripper()
   pub = rospy.Publisher('current_state', String, queue_size = 10)
   # rospy.Subscriber('SModelRobotInput', inputMsg.SModel_robot_input, gripper_status)
   rospy.sleep(1.5)
   rate = rospy.Rate(1.0)

   while not rospy.is_shutdown() :
      visible = []
      world.reinitialize()
      world.observe_world()

      length = [i for i in range(len(world.visible_items))]
      for k in length :
         visible.append([world.visible_items[k],world.x_position[k],world.y_position[k],world.z_position[k]])

      y = np.array(world.y_position)
      y = np.argsort(y)

      total_items = len(world.visible_markers) + len(world.visible_cubes)

      count = 0

      # for k in np.arange(total_items) :
      nb_items = [i for i in range(total_items)]
      for k in nb_items :
         # while xPosition[x[k]] != visible[i][1] :
         while world.y_position[y[k]] != visible[count][2] :
            count = count + 1
         if visible[count][0] != "G" and visible[count][0] != "B" :
            world.state = world.state + "N"
         else :
            world.state = world.state + visible[count][0]
         count = 0 

      # pubHandover = rospy.Publisher('handover', String, queue_size = 10)

      # if listenerMarkers.canTransform("camera/1", "marker/6", rospy.Time.now() - rospy.Duration(1.0)) :
      #    pubHandover.publish("handover")
      # else :
      #    pubHandover.publish("no handover")

      # Gripper feedback
      if "B" in world.state and "G" in world.state:
         world.state_full = world.state + "N"
      elif "B" in world.state and not "G" in world.state:
         if gripper.gripper_status < 250 and gripper.gripper_status > 225:
            world.state_full = world.state + "G"
         elif gripper.gripper_status < 10 :
            world.state_full = world.state + "N"

      elif "G" in world.state and not "B" in world.state:
         if gripper.gripper_status < 250 and gripper.gripper_status > 225:
            world.state_full = world.state + "B"
         elif gripper.gripper_status < 10 :
            world.state_full = world.state + "N"

      elif not "B" in world.state and not "G" in world.state:
         if gripper.gripper_status < 250 and gripper.gripper_status > 225:
            for i in np.arange(len(old_state)):
               if world.old_state[i] != "N":
                  world.state_full = world.state + world.old_state[i]
         elif gripper.gripper_status < 10 :
            world.state_full = world.state + "N"

      world.old_state = world.state_full 
    
      if len(world.state_full) == 4 :
         rospy.loginfo(world.state_full)
         pub.publish(world.state_full)
         rate.sleep()
      #print(state)



   
